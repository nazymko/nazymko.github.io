// Results Table Component - Handles results display and interaction
export class ResultsTableComponent {
    constructor(containerId = 'resultsTableContainer') {\n        this.containerId = containerId;\n        this.currentResults = [];\n        this.currentSortColumn = 'taxAmountInDisplayCurrency';\n        this.currentSortDirection = 'desc';\n        this.currentDisplayCurrency = 'USD';\n        this.listeners = new Map();\n\n        this.init();\n    }\n\n    // Initialize the component\n    init() {\n        this.setupElements();\n        this.setupEventListeners();\n    }\n\n    // Setup DOM element references\n    setupElements() {\n        this.elements = {\n            container: document.getElementById(this.containerId),\n            tableBody: document.getElementById('resultsTableBody'),\n            searchInput: document.getElementById('countrySearch'),\n            exportButton: document.getElementById('exportBtn'),\n            summaryStats: {\n                totalCountries: document.getElementById('totalCountries'),\n                avgTax: document.getElementById('avgTax'),\n                maxTax: document.getElementById('maxTax'),\n                minTax: document.getElementById('minTax')\n            }\n        };\n    }\n\n    // Setup event listeners\n    setupEventListeners() {\n        // Search functionality\n        if (this.elements.searchInput) {\n            this.elements.searchInput.addEventListener('input', (e) => {\n                this.filterResults(e.target.value);\n            });\n        }\n\n        // Export button\n        if (this.elements.exportButton) {\n            this.elements.exportButton.addEventListener('click', () => {\n                this.exportToCSV();\n            });\n        }\n    }\n\n    // Update table with new results\n    updateResults(results, displayCurrency) {\n        this.currentResults = results;\n        this.currentDisplayCurrency = displayCurrency;\n\n        if (this.elements.container) {\n            this.elements.container.style.display = 'block';\n        }\n\n        this.updateCurrencyDisplay(displayCurrency);\n        this.renderTable();\n        this.updateSummaryStats();\n    }\n\n    // Render the results table\n    renderTable() {\n        if (!this.elements.tableBody) return;\n\n        // Sort results\n        const sortedResults = this.getSortedResults();\n\n        // Clear table\n        this.elements.tableBody.innerHTML = '';\n\n        // Add rows\n        sortedResults.forEach((result, index) => {\n            const row = this.createTableRow(result, index);\n            this.elements.tableBody.appendChild(row);\n        });\n\n        this.updateSortIndicators();\n    }\n\n    // Get sorted results based on current sort settings\n    getSortedResults() {\n        return [...this.currentResults].sort((a, b) => {\n            const aVal = a[this.currentSortColumn];\n            const bVal = b[this.currentSortColumn];\n\n            if (typeof aVal === 'string') {\n                return this.currentSortDirection === 'asc'\n                    ? aVal.localeCompare(bVal)\n                    : bVal.localeCompare(aVal);\n            }\n\n            return this.currentSortDirection === 'asc'\n                ? aVal - bVal\n                : bVal - aVal;\n        });\n    }\n\n    // Create a table row element\n    createTableRow(result, index) {\n        const row = document.createElement('tr');\n        row.className = 'results-row';\n        row.dataset.countryKey = result.countryKey;\n\n        // Add click handler\n        row.addEventListener('click', () => {\n            this.selectRow(row, result);\n        });\n\n        // Create cells\n        row.appendChild(this.createCell(index + 1, 'rank-cell'));\n        row.appendChild(this.createCountryCell(result));\n        row.appendChild(this.createTaxAmountCell(result));\n        row.appendChild(this.createRateCell(result));\n        row.appendChild(this.createNetIncomeCell(result));\n        row.appendChild(this.createLocalAmountsCell(result));\n        row.appendChild(this.createExchangeRateCell(result));\n\n        return row;\n    }\n\n    // Create a basic table cell\n    createCell(content, className = '') {\n        const cell = document.createElement('td');\n        cell.textContent = content;\n        if (className) cell.className = className;\n        return cell;\n    }\n\n    // Create country info cell\n    createCountryCell(result) {\n        const cell = document.createElement('td');\n        cell.innerHTML = `\n            <div class=\"country-info\">\n                <strong>${result.countryName}</strong>\n                <small>${result.currency}</small>\n            </div>\n        `;\n        return cell;\n    }\n\n    // Create tax amount cell\n    createTaxAmountCell(result) {\n        const cell = document.createElement('td');\n        cell.className = 'tax-amount';\n        cell.textContent = `${this.currentDisplayCurrency} ${result.taxAmountInDisplayCurrency.toLocaleString()}`;\n        return cell;\n    }\n\n    // Create tax rate cell\n    createRateCell(result) {\n        const cell = document.createElement('td');\n        cell.className = 'tax-rate';\n        cell.textContent = `${result.effectiveRate.toFixed(2)}%`;\n        return cell;\n    }\n\n    // Create net income cell\n    createNetIncomeCell(result) {\n        const cell = document.createElement('td');\n        cell.className = 'net-income';\n        cell.textContent = `${this.currentDisplayCurrency} ${result.netIncomeInDisplayCurrency.toLocaleString()}`;\n        return cell;\n    }\n\n    // Create local amounts cell\n    createLocalAmountsCell(result) {\n        const cell = document.createElement('td');\n        cell.className = 'local-amounts';\n        cell.innerHTML = `\n            <div class=\"local-info\">\n                <div>Tax: ${result.currency} ${result.taxAmount.toLocaleString()}</div>\n                <div>Net: ${result.currency} ${result.netIncome.toLocaleString()}</div>\n            </div>\n        `;\n        return cell;\n    }\n\n    // Create exchange rate cell\n    createExchangeRateCell(result) {\n        const cell = document.createElement('td');\n        cell.className = 'exchange-rate';\n        cell.textContent = result.exchangeRate && result.exchangeRate !== 1 \n            ? result.exchangeRate.toFixed(4) \n            : '-';\n        return cell;\n    }\n\n    // Select a row and emit event\n    selectRow(row, result) {\n        // Remove previous selection\n        document.querySelectorAll('.results-row').forEach(r => r.classList.remove('selected'));\n        \n        // Add selection to current row\n        row.classList.add('selected');\n        \n        // Emit selection event\n        this.emit('rowSelected', { result, row });\n    }\n\n    // Sort by column\n    sortByColumn(column) {\n        if (this.currentSortColumn === column) {\n            this.currentSortDirection = this.currentSortDirection === 'asc' ? 'desc' : 'asc';\n        } else {\n            this.currentSortColumn = column;\n            this.currentSortDirection = 'desc';\n        }\n\n        this.renderTable();\n    }\n\n    // Update sort indicators\n    updateSortIndicators() {\n        document.querySelectorAll('.sort-header').forEach(header => {\n            const column = header.dataset.column;\n            const indicator = header.querySelector('.sort-indicator');\n\n            if (column === this.currentSortColumn) {\n                indicator.textContent = this.currentSortDirection === 'asc' ? '↑' : '↓';\n                header.classList.add('active-sort');\n            } else {\n                indicator.textContent = '↕';\n                header.classList.remove('active-sort');\n            }\n        });\n    }\n\n    // Filter results based on search term\n    filterResults(searchTerm) {\n        const rows = document.querySelectorAll('.results-row');\n        const term = searchTerm.toLowerCase();\n\n        rows.forEach(row => {\n            const countryInfo = row.querySelector('.country-info');\n            const countryName = countryInfo.querySelector('strong').textContent.toLowerCase();\n            const currency = countryInfo.querySelector('small').textContent.toLowerCase();\n\n            if (countryName.includes(term) || currency.includes(term)) {\n                row.style.display = '';\n            } else {\n                row.style.display = 'none';\n            }\n        });\n    }\n\n    // Update currency display\n    updateCurrencyDisplay(currency) {\n        document.querySelectorAll('.currency-display').forEach(element => {\n            element.textContent = currency;\n        });\n    }\n\n    // Update summary statistics\n    updateSummaryStats() {\n        if (this.currentResults.length === 0) return;\n\n        const totalTax = this.currentResults.reduce((sum, r) => sum + r.taxAmountInDisplayCurrency, 0);\n        const avgTax = totalTax / this.currentResults.length;\n        const maxTax = Math.max(...this.currentResults.map(r => r.taxAmountInDisplayCurrency));\n        const minTax = Math.min(...this.currentResults.map(r => r.taxAmountInDisplayCurrency));\n\n        const maxTaxCountry = this.currentResults.find(r => r.taxAmountInDisplayCurrency === maxTax);\n        const minTaxCountry = this.currentResults.find(r => r.taxAmountInDisplayCurrency === minTax);\n\n        // Update summary elements\n        if (this.elements.summaryStats.totalCountries) {\n            this.elements.summaryStats.totalCountries.textContent = this.currentResults.length;\n        }\n        if (this.elements.summaryStats.avgTax) {\n            this.elements.summaryStats.avgTax.textContent = `${this.currentDisplayCurrency} ${avgTax.toLocaleString()}`;\n        }\n        if (this.elements.summaryStats.maxTax) {\n            this.elements.summaryStats.maxTax.textContent = `${this.currentDisplayCurrency} ${maxTax.toLocaleString()} (${maxTaxCountry.countryName})`;\n        }\n        if (this.elements.summaryStats.minTax) {\n            this.elements.summaryStats.minTax.textContent = `${this.currentDisplayCurrency} ${minTax.toLocaleString()} (${minTaxCountry.countryName})`;\n        }\n    }\n\n    // Export results to CSV\n    exportToCSV() {\n        if (this.currentResults.length === 0) return;\n\n        const headers = [\n            'Rank',\n            'Country',\n            'Currency',\n            `Tax Amount (${this.currentDisplayCurrency})`,\n            'Effective Rate (%)',\n            `Net Income (${this.currentDisplayCurrency})`,\n            'Local Tax (Local Currency)',\n            'Local Net Income (Local Currency)',\n            'Exchange Rate'\n        ];\n\n        const csvData = [\n            headers.join(','),\n            ...this.currentResults.map((result, index) => [\n                index + 1,\n                `\"${result.countryName}\"`,\n                result.currency,\n                result.taxAmountInDisplayCurrency.toFixed(2),\n                result.effectiveRate.toFixed(2),\n                result.netIncomeInDisplayCurrency.toFixed(2),\n                result.taxAmount.toFixed(2),\n                result.netIncome.toFixed(2),\n                result.exchangeRate ? result.exchangeRate.toFixed(4) : '1'\n            ].join(','))\n        ].join('\\n');\n\n        // Download CSV\n        const blob = new Blob([csvData], { type: 'text/csv' });\n        const url = window.URL.createObjectURL(blob);\n        const a = document.createElement('a');\n        a.href = url;\n        a.download = `tax-comparison-${new Date().toISOString().slice(0, 10)}.csv`;\n        document.body.appendChild(a);\n        a.click();\n        document.body.removeChild(a);\n        window.URL.revokeObjectURL(url);\n    }\n\n    // Clear results\n    clear() {\n        if (this.elements.container) {\n            this.elements.container.style.display = 'none';\n        }\n        if (this.elements.tableBody) {\n            this.elements.tableBody.innerHTML = '';\n        }\n        this.currentResults = [];\n    }\n\n    // Event emitter functionality\n    on(event, callback) {\n        if (!this.listeners.has(event)) {\n            this.listeners.set(event, []);\n        }\n        this.listeners.get(event).push(callback);\n    }\n\n    emit(event, data) {\n        if (!this.listeners.has(event)) return;\n        \n        this.listeners.get(event).forEach(callback => {\n            try {\n                callback(data);\n            } catch (error) {\n                console.error(`Error in ${event} listener:`, error);\n            }\n        });\n    }\n\n    // Get current results\n    getCurrentResults() {\n        return this.currentResults;\n    }\n\n    // Destroy the component\n    destroy() {\n        this.listeners.clear();\n    }\n}